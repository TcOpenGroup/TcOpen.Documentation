### YamlMime:ManagedReference
items:
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  commentId: T:TcOpen.Inxton.MongoDb.MongoDbRepository`1
  id: MongoDbRepository`1
  parent: TcOpen.Inxton.MongoDb
  children:
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.#ctor(TcOpen.Inxton.MongoDb.MongoDbRepositorySettings{`0})
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.collection
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.Collection
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.CountNvi
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.CreateNvi(System.String,`0)
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.DeleteNvi(System.String)
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.FilteredCountNvi(System.String)
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.location
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.Queryable
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.ReadNvi(System.String)
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.RecordExists(System.String)
  - TcOpen.Inxton.MongoDb.MongoDbRepository`1.UpdateNvi(System.String,`0)
  langs:
  - csharp
  - vb
  name: MongoDbRepository<T>
  nameWithType: MongoDbRepository<T>
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>
  type: Class
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: MongoDbRepository
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 30
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  summary: "\nProvides access to basic operations for MongoDB.\nTo use this code, mongo database must run somewhere. To start MongoDB locally you can use following code\n\nStart MongoDB without authentication \n<pre><code>    &quot;C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe&quot;  --dbpath C:\\DATA\\DB446\\ </code></pre>\n\nStart MongoDB with authentication. You don&apos;t have to use the &quot;--port&quot; attribute or use a different &quot;--dbpath&quot;. The only \nreason why would you want to run authenticated database on a different dbpath and port simultaneously is if they&apos;re running\non the same machine.\n\nMore info about the use credentials <xref href=\"TcOpen.Inxton.MongoDb.MongoDbCredentials\" data-throw-if-not-resolved=\"false\"></xref>\n\n<pre><code>    &quot;C:\\Program Files\\MongoDB\\Server\\4.4\\bin\\mongod.exe&quot;  --dbpath C:\\DATA\\DB446_AUTH\\ --auth --port 27018</code></pre>\n"
  example: []
  syntax:
    content: 'public class MongoDbRepository<T> : RepositoryBase<T>, IRepository<T>, IRepository where T : IBrowsableDataObject'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public Class MongoDbRepository(Of T As IBrowsableDataObject)

          Inherits RepositoryBase(Of T)

          Implements IRepository(Of T), IRepository
  inheritance:
  - System.Object
  - TcOpen.Inxton.Data.RepositoryBase{{T}}
  implements:
  - TcOpen.Inxton.Abstractions.Data.IRepository{{T}}
  - TcOpen.Inxton.Abstractions.Data.IRepository
  inheritedMembers:
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.Count
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.FilteredCount(System.String)
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.mutex
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.Create(System.String,{T})
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.Read(System.String)
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.Update(System.String,{T})
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.Delete(System.String)
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Count
  - TcOpen.Inxton.Data.RepositoryBase{{T}}.GetRecords(System.String,System.Int32,System.Int32)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: MongoDbRepository(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T)
  name.vb: MongoDbRepository(Of T)
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.collection
  commentId: F:TcOpen.Inxton.MongoDb.MongoDbRepository`1.collection
  id: collection
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: collection
  nameWithType: MongoDbRepository<T>.collection
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.collection
  type: Field
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: collection
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 33
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: IMongoCollection<T> collection
    return:
      type: MongoDB.Driver.IMongoCollection{{T}}
    content.vb: collection As IMongoCollection(Of T)
  nameWithType.vb: MongoDbRepository(Of T).collection
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).collection
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.location
  commentId: F:TcOpen.Inxton.MongoDb.MongoDbRepository`1.location
  id: location
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: location
  nameWithType: MongoDbRepository<T>.location
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.location
  type: Field
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: location
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 34
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: readonly string location
    return:
      type: System.String
    content.vb: ReadOnly location As String
  nameWithType.vb: MongoDbRepository(Of T).location
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).location
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.#ctor(TcOpen.Inxton.MongoDb.MongoDbRepositorySettings{`0})
  commentId: M:TcOpen.Inxton.MongoDb.MongoDbRepository`1.#ctor(TcOpen.Inxton.MongoDb.MongoDbRepositorySettings{`0})
  id: '#ctor(TcOpen.Inxton.MongoDb.MongoDbRepositorySettings{`0})'
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: MongoDbRepository(MongoDbRepositorySettings<T>)
  nameWithType: MongoDbRepository<T>.MongoDbRepository(MongoDbRepositorySettings<T>)
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.MongoDbRepository(TcOpen.Inxton.MongoDb.MongoDbRepositorySettings<T>)
  type: Constructor
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: .ctor
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 36
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: public MongoDbRepository(MongoDbRepositorySettings<T> parameters)
    parameters:
    - id: parameters
      type: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings{{T}}
    content.vb: Public Sub New(parameters As MongoDbRepositorySettings(Of T))
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.#ctor*
  nameWithType.vb: MongoDbRepository(Of T).MongoDbRepository(MongoDbRepositorySettings(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).MongoDbRepository(TcOpen.Inxton.MongoDb.MongoDbRepositorySettings(Of T))
  name.vb: MongoDbRepository(MongoDbRepositorySettings(Of T))
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.RecordExists(System.String)
  commentId: M:TcOpen.Inxton.MongoDb.MongoDbRepository`1.RecordExists(System.String)
  id: RecordExists(System.String)
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: RecordExists(String)
  nameWithType: MongoDbRepository<T>.RecordExists(String)
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.RecordExists(System.String)
  type: Method
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: RecordExists
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 42
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: bool RecordExists(string identifier)
    parameters:
    - id: identifier
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function RecordExists(identifier As String) As Boolean
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.RecordExists*
  nameWithType.vb: MongoDbRepository(Of T).RecordExists(String)
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).RecordExists(System.String)
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.CreateNvi(System.String,`0)
  commentId: M:TcOpen.Inxton.MongoDb.MongoDbRepository`1.CreateNvi(System.String,`0)
  id: CreateNvi(System.String,`0)
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: CreateNvi(String, T)
  nameWithType: MongoDbRepository<T>.CreateNvi(String, T)
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.CreateNvi(System.String, T)
  type: Method
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: CreateNvi
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 45
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: protected override void CreateNvi(string identifier, T data)
    parameters:
    - id: identifier
      type: System.String
    - id: data
      type: '{T}'
    content.vb: Protected Overrides Sub CreateNvi(identifier As String, data As T)
  overridden: TcOpen.Inxton.Data.RepositoryBase{{T}}.CreateNvi(System.String,{T})
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.CreateNvi*
  nameWithType.vb: MongoDbRepository(Of T).CreateNvi(String, T)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).CreateNvi(System.String, T)
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.DeleteNvi(System.String)
  commentId: M:TcOpen.Inxton.MongoDb.MongoDbRepository`1.DeleteNvi(System.String)
  id: DeleteNvi(System.String)
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: DeleteNvi(String)
  nameWithType: MongoDbRepository<T>.DeleteNvi(String)
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.DeleteNvi(System.String)
  type: Method
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: DeleteNvi
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 68
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: protected override void DeleteNvi(string identifier)
    parameters:
    - id: identifier
      type: System.String
    content.vb: Protected Overrides Sub DeleteNvi(identifier As String)
  overridden: TcOpen.Inxton.Data.RepositoryBase{{T}}.DeleteNvi(System.String)
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.DeleteNvi*
  nameWithType.vb: MongoDbRepository(Of T).DeleteNvi(String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).DeleteNvi(System.String)
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.FilteredCountNvi(System.String)
  commentId: M:TcOpen.Inxton.MongoDb.MongoDbRepository`1.FilteredCountNvi(System.String)
  id: FilteredCountNvi(System.String)
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: FilteredCountNvi(String)
  nameWithType: MongoDbRepository<T>.FilteredCountNvi(String)
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.FilteredCountNvi(System.String)
  type: Method
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: FilteredCountNvi
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 70
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: protected override long FilteredCountNvi(string id)
    parameters:
    - id: id
      type: System.String
    return:
      type: System.Int64
    content.vb: Protected Overrides Function FilteredCountNvi(id As String) As Long
  overridden: TcOpen.Inxton.Data.RepositoryBase{{T}}.FilteredCountNvi(System.String)
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.FilteredCountNvi*
  nameWithType.vb: MongoDbRepository(Of T).FilteredCountNvi(String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).FilteredCountNvi(System.String)
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
  commentId: M:TcOpen.Inxton.MongoDb.MongoDbRepository`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
  id: GetRecordsNvi(System.String,System.Int32,System.Int32)
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: GetRecordsNvi(String, Int32, Int32)
  nameWithType: MongoDbRepository<T>.GetRecordsNvi(String, Int32, Int32)
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.GetRecordsNvi(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: GetRecordsNvi
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 82
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: protected override IEnumerable<T> GetRecordsNvi(string identifier, int limit, int skip)
    parameters:
    - id: identifier
      type: System.String
    - id: limit
      type: System.Int32
    - id: skip
      type: System.Int32
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Protected Overrides Function GetRecordsNvi(identifier As String, limit As Integer, skip As Integer) As IEnumerable(Of T)
  overridden: TcOpen.Inxton.Data.RepositoryBase{{T}}.GetRecordsNvi(System.String,System.Int32,System.Int32)
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.GetRecordsNvi*
  nameWithType.vb: MongoDbRepository(Of T).GetRecordsNvi(String, Int32, Int32)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).GetRecordsNvi(System.String, System.Int32, System.Int32)
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.ReadNvi(System.String)
  commentId: M:TcOpen.Inxton.MongoDb.MongoDbRepository`1.ReadNvi(System.String)
  id: ReadNvi(System.String)
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: ReadNvi(String)
  nameWithType: MongoDbRepository<T>.ReadNvi(String)
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.ReadNvi(System.String)
  type: Method
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: ReadNvi
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 100
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: protected override T ReadNvi(string identifier)
    parameters:
    - id: identifier
      type: System.String
    return:
      type: '{T}'
    content.vb: Protected Overrides Function ReadNvi(identifier As String) As T
  overridden: TcOpen.Inxton.Data.RepositoryBase{{T}}.ReadNvi(System.String)
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.ReadNvi*
  nameWithType.vb: MongoDbRepository(Of T).ReadNvi(String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).ReadNvi(System.String)
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.UpdateNvi(System.String,`0)
  commentId: M:TcOpen.Inxton.MongoDb.MongoDbRepository`1.UpdateNvi(System.String,`0)
  id: UpdateNvi(System.String,`0)
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: UpdateNvi(String, T)
  nameWithType: MongoDbRepository<T>.UpdateNvi(String, T)
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.UpdateNvi(System.String, T)
  type: Method
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: UpdateNvi
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 119
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: protected override void UpdateNvi(string identifier, T data)
    parameters:
    - id: identifier
      type: System.String
    - id: data
      type: '{T}'
    content.vb: Protected Overrides Sub UpdateNvi(identifier As String, data As T)
  overridden: TcOpen.Inxton.Data.RepositoryBase{{T}}.UpdateNvi(System.String,{T})
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.UpdateNvi*
  nameWithType.vb: MongoDbRepository(Of T).UpdateNvi(String, T)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).UpdateNvi(System.String, T)
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.CountNvi
  commentId: P:TcOpen.Inxton.MongoDb.MongoDbRepository`1.CountNvi
  id: CountNvi
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: CountNvi
  nameWithType: MongoDbRepository<T>.CountNvi
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.CountNvi
  type: Property
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: CountNvi
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 137
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: protected override long CountNvi { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Protected Overrides ReadOnly Property CountNvi As Long
  overridden: TcOpen.Inxton.Data.RepositoryBase{{T}}.CountNvi
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.CountNvi*
  nameWithType.vb: MongoDbRepository(Of T).CountNvi
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).CountNvi
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.Collection
  commentId: P:TcOpen.Inxton.MongoDb.MongoDbRepository`1.Collection
  id: Collection
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: Collection
  nameWithType: MongoDbRepository<T>.Collection
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.Collection
  type: Property
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Collection
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 139
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: public IMongoCollection<T> Collection { get; }
    parameters: []
    return:
      type: MongoDB.Driver.IMongoCollection{{T}}
    content.vb: Public ReadOnly Property Collection As IMongoCollection(Of T)
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.Collection*
  nameWithType.vb: MongoDbRepository(Of T).Collection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).Collection
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.Queryable
  commentId: P:TcOpen.Inxton.MongoDb.MongoDbRepository`1.Queryable
  id: Queryable
  parent: TcOpen.Inxton.MongoDb.MongoDbRepository`1
  langs:
  - csharp
  - vb
  name: Queryable
  nameWithType: MongoDbRepository<T>.Queryable
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.Queryable
  type: Property
  source:
    remote:
      path: src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Queryable
    path: ../TcOpen/src/TcoData/src/Repository/MongoDb/Mongo/MongoDbRepository.cs
    startLine: 141
  assemblies:
  - TcOpen.Inxton.MongoDb
  namespace: TcOpen.Inxton.MongoDb
  syntax:
    content: public override IQueryable<T> Queryable { get; }
    parameters: []
    return:
      type: System.Linq.IQueryable{{T}}
    content.vb: Public Overrides ReadOnly Property Queryable As IQueryable(Of T)
  overridden: TcOpen.Inxton.Data.RepositoryBase{{T}}.Queryable
  overload: TcOpen.Inxton.MongoDb.MongoDbRepository`1.Queryable*
  nameWithType.vb: MongoDbRepository(Of T).Queryable
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).Queryable
references:
- uid: TcOpen.Inxton.MongoDb.MongoDbCredentials
  commentId: T:TcOpen.Inxton.MongoDb.MongoDbCredentials
  parent: TcOpen.Inxton.MongoDb
  name: MongoDbCredentials
  nameWithType: MongoDbCredentials
  fullName: TcOpen.Inxton.MongoDb.MongoDbCredentials
- uid: TcOpen.Inxton.MongoDb
  commentId: N:TcOpen.Inxton.MongoDb
  name: TcOpen.Inxton.MongoDb
  nameWithType: TcOpen.Inxton.MongoDb
  fullName: TcOpen.Inxton.MongoDb
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}
  commentId: T:TcOpen.Inxton.Data.RepositoryBase{`0}
  parent: TcOpen.Inxton.Data
  definition: TcOpen.Inxton.Data.RepositoryBase`1
  name: RepositoryBase<T>
  nameWithType: RepositoryBase<T>
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>
  nameWithType.vb: RepositoryBase(Of T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T)
  name.vb: RepositoryBase(Of T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: TcOpen.Inxton.Data.RepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: TcOpen.Inxton.Data.RepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Abstractions.Data.IRepository{{T}}
  commentId: T:TcOpen.Inxton.Abstractions.Data.IRepository{`0}
  parent: TcOpen.Inxton.Abstractions.Data
  definition: TcOpen.Inxton.Abstractions.Data.IRepository`1
  name: IRepository<T>
  nameWithType: IRepository<T>
  fullName: TcOpen.Inxton.Abstractions.Data.IRepository<T>
  nameWithType.vb: IRepository(Of T)
  fullName.vb: TcOpen.Inxton.Abstractions.Data.IRepository(Of T)
  name.vb: IRepository(Of T)
  spec.csharp:
  - uid: TcOpen.Inxton.Abstractions.Data.IRepository`1
    name: IRepository
    nameWithType: IRepository
    fullName: TcOpen.Inxton.Abstractions.Data.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TcOpen.Inxton.Abstractions.Data.IRepository`1
    name: IRepository
    nameWithType: IRepository
    fullName: TcOpen.Inxton.Abstractions.Data.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Abstractions.Data.IRepository
  commentId: T:TcOpen.Inxton.Abstractions.Data.IRepository
  parent: TcOpen.Inxton.Abstractions.Data
  name: IRepository
  nameWithType: IRepository
  fullName: TcOpen.Inxton.Abstractions.Data.IRepository
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.Count
  commentId: P:TcOpen.Inxton.Data.RepositoryBase{`0}.Count
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.Count
  name: Count
  nameWithType: RepositoryBase<T>.Count
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Count
  nameWithType.vb: RepositoryBase(Of T).Count
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Count
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.FilteredCount(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.FilteredCount(System.String)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCount(System.String)
  name: FilteredCount(String)
  nameWithType: RepositoryBase<T>.FilteredCount(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.FilteredCount(System.String)
  nameWithType.vb: RepositoryBase(Of T).FilteredCount(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).FilteredCount(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCount(System.String)
    name: FilteredCount
    nameWithType: RepositoryBase<T>.FilteredCount
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.FilteredCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCount(System.String)
    name: FilteredCount
    nameWithType: RepositoryBase(Of T).FilteredCount
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).FilteredCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.mutex
  commentId: F:TcOpen.Inxton.Data.RepositoryBase{`0}.mutex
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.mutex
  name: mutex
  nameWithType: RepositoryBase<T>.mutex
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.mutex
  nameWithType.vb: RepositoryBase(Of T).mutex
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).mutex
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.Create(System.String,{T})
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.Create(System.String,`0)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.Create(System.String,`0)
  name: Create(String, T)
  nameWithType: RepositoryBase<T>.Create(String, T)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Create(System.String, T)
  nameWithType.vb: RepositoryBase(Of T).Create(String, T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Create(System.String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Create(System.String,`0)
    name: Create
    nameWithType: RepositoryBase<T>.Create
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Create(System.String,`0)
    name: Create
    nameWithType: RepositoryBase(Of T).Create
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.Read(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.Read(System.String)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.Read(System.String)
  name: Read(String)
  nameWithType: RepositoryBase<T>.Read(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Read(System.String)
  nameWithType.vb: RepositoryBase(Of T).Read(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Read(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Read(System.String)
    name: Read
    nameWithType: RepositoryBase<T>.Read
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Read(System.String)
    name: Read
    nameWithType: RepositoryBase(Of T).Read
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.Update(System.String,{T})
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.Update(System.String,`0)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.Update(System.String,`0)
  name: Update(String, T)
  nameWithType: RepositoryBase<T>.Update(String, T)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Update(System.String, T)
  nameWithType.vb: RepositoryBase(Of T).Update(String, T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Update(System.String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Update(System.String,`0)
    name: Update
    nameWithType: RepositoryBase<T>.Update
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Update(System.String,`0)
    name: Update
    nameWithType: RepositoryBase(Of T).Update
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.Delete(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.Delete(System.String)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.Delete(System.String)
  name: Delete(String)
  nameWithType: RepositoryBase<T>.Delete(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Delete(System.String)
  nameWithType.vb: RepositoryBase(Of T).Delete(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Delete(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryBase<T>.Delete
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryBase(Of T).Delete
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
  name: IRepository.Create(String, Object)
  nameWithType: RepositoryBase<T>.IRepository.Create(String, Object)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Create(System.String, System.Object)
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Create(String, Object)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Create(System.String, System.Object)
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Create(String, Object)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
    name: IRepository.Create
    nameWithType: RepositoryBase<T>.IRepository.Create
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
    name: TcOpen.Inxton.Abstractions.Data.IRepository.Create
    nameWithType: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Create
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
  name: IRepository.Read(String)
  nameWithType: RepositoryBase<T>.IRepository.Read(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Read(System.String)
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Read(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Read(System.String)
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Read(String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
    name: IRepository.Read
    nameWithType: RepositoryBase<T>.IRepository.Read
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
    name: TcOpen.Inxton.Abstractions.Data.IRepository.Read
    nameWithType: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Read
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
  name: IRepository.Update(String, Object)
  nameWithType: RepositoryBase<T>.IRepository.Update(String, Object)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Update(System.String, System.Object)
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Update(String, Object)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Update(System.String, System.Object)
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Update(String, Object)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
    name: IRepository.Update
    nameWithType: RepositoryBase<T>.IRepository.Update
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
    name: TcOpen.Inxton.Abstractions.Data.IRepository.Update
    nameWithType: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Update
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
  name: IRepository.Delete(String)
  nameWithType: RepositoryBase<T>.IRepository.Delete(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Delete(System.String)
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Delete(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Delete(System.String)
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Delete(String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
    name: IRepository.Delete
    nameWithType: RepositoryBase<T>.IRepository.Delete
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
    name: TcOpen.Inxton.Abstractions.Data.IRepository.Delete
    nameWithType: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Delete
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.TcOpen#Inxton#Abstractions#Data#IRepository#Count
  commentId: P:TcOpen.Inxton.Data.RepositoryBase{`0}.TcOpen#Inxton#Abstractions#Data#IRepository#Count
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Count
  name: IRepository.Count
  nameWithType: RepositoryBase<T>.IRepository.Count
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Count
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Count
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Count
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Count
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.GetRecords(System.String,System.Int32,System.Int32)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.GetRecords(System.String,System.Int32,System.Int32)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.GetRecords(System.String,System.Int32,System.Int32)
  name: GetRecords(String, Int32, Int32)
  nameWithType: RepositoryBase<T>.GetRecords(String, Int32, Int32)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.GetRecords(System.String, System.Int32, System.Int32)
  nameWithType.vb: RepositoryBase(Of T).GetRecords(String, Int32, Int32)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).GetRecords(System.String, System.Int32, System.Int32)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecords(System.String,System.Int32,System.Int32)
    name: GetRecords
    nameWithType: RepositoryBase<T>.GetRecords
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.GetRecords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecords(System.String,System.Int32,System.Int32)
    name: GetRecords
    nameWithType: RepositoryBase(Of T).GetRecords
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).GetRecords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TcOpen.Inxton.Data.RepositoryBase`1
  commentId: T:TcOpen.Inxton.Data.RepositoryBase`1
  name: RepositoryBase<T>
  nameWithType: RepositoryBase<T>
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>
  nameWithType.vb: RepositoryBase(Of T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T)
  name.vb: RepositoryBase(Of T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: TcOpen.Inxton.Data.RepositoryBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1
    name: RepositoryBase
    nameWithType: RepositoryBase
    fullName: TcOpen.Inxton.Data.RepositoryBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data
  commentId: N:TcOpen.Inxton.Data
  name: TcOpen.Inxton.Data
  nameWithType: TcOpen.Inxton.Data
  fullName: TcOpen.Inxton.Data
- uid: TcOpen.Inxton.Abstractions.Data.IRepository`1
  commentId: T:TcOpen.Inxton.Abstractions.Data.IRepository`1
  name: IRepository<T>
  nameWithType: IRepository<T>
  fullName: TcOpen.Inxton.Abstractions.Data.IRepository<T>
  nameWithType.vb: IRepository(Of T)
  fullName.vb: TcOpen.Inxton.Abstractions.Data.IRepository(Of T)
  name.vb: IRepository(Of T)
  spec.csharp:
  - uid: TcOpen.Inxton.Abstractions.Data.IRepository`1
    name: IRepository
    nameWithType: IRepository
    fullName: TcOpen.Inxton.Abstractions.Data.IRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TcOpen.Inxton.Abstractions.Data.IRepository`1
    name: IRepository
    nameWithType: IRepository
    fullName: TcOpen.Inxton.Abstractions.Data.IRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Abstractions.Data
  commentId: N:TcOpen.Inxton.Abstractions.Data
  name: TcOpen.Inxton.Abstractions.Data
  nameWithType: TcOpen.Inxton.Abstractions.Data
  fullName: TcOpen.Inxton.Abstractions.Data
- uid: TcOpen.Inxton.Data.RepositoryBase`1.Count
  commentId: P:TcOpen.Inxton.Data.RepositoryBase`1.Count
  name: Count
  nameWithType: RepositoryBase<T>.Count
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Count
  nameWithType.vb: RepositoryBase(Of T).Count
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Count
- uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCount(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.FilteredCount(System.String)
  isExternal: true
  name: FilteredCount(String)
  nameWithType: RepositoryBase<T>.FilteredCount(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.FilteredCount(System.String)
  nameWithType.vb: RepositoryBase(Of T).FilteredCount(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).FilteredCount(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCount(System.String)
    name: FilteredCount
    nameWithType: RepositoryBase<T>.FilteredCount
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.FilteredCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCount(System.String)
    name: FilteredCount
    nameWithType: RepositoryBase(Of T).FilteredCount
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).FilteredCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.mutex
  commentId: F:TcOpen.Inxton.Data.RepositoryBase`1.mutex
  name: mutex
  nameWithType: RepositoryBase<T>.mutex
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.mutex
  nameWithType.vb: RepositoryBase(Of T).mutex
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).mutex
- uid: TcOpen.Inxton.Data.RepositoryBase`1.Create(System.String,`0)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.Create(System.String,`0)
  isExternal: true
  name: Create(String, T)
  nameWithType: RepositoryBase<T>.Create(String, T)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Create(System.String, T)
  nameWithType.vb: RepositoryBase(Of T).Create(String, T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Create(System.String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Create(System.String,`0)
    name: Create
    nameWithType: RepositoryBase<T>.Create
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Create(System.String,`0)
    name: Create
    nameWithType: RepositoryBase(Of T).Create
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.Read(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.Read(System.String)
  isExternal: true
  name: Read(String)
  nameWithType: RepositoryBase<T>.Read(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Read(System.String)
  nameWithType.vb: RepositoryBase(Of T).Read(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Read(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Read(System.String)
    name: Read
    nameWithType: RepositoryBase<T>.Read
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Read(System.String)
    name: Read
    nameWithType: RepositoryBase(Of T).Read
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.Update(System.String,`0)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.Update(System.String,`0)
  isExternal: true
  name: Update(String, T)
  nameWithType: RepositoryBase<T>.Update(String, T)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Update(System.String, T)
  nameWithType.vb: RepositoryBase(Of T).Update(String, T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Update(System.String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Update(System.String,`0)
    name: Update
    nameWithType: RepositoryBase<T>.Update
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Update(System.String,`0)
    name: Update
    nameWithType: RepositoryBase(Of T).Update
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.Delete(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.Delete(System.String)
  isExternal: true
  name: Delete(String)
  nameWithType: RepositoryBase<T>.Delete(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Delete(System.String)
  nameWithType.vb: RepositoryBase(Of T).Delete(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Delete(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryBase<T>.Delete
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.Delete(System.String)
    name: Delete
    nameWithType: RepositoryBase(Of T).Delete
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
  isExternal: true
  name: IRepository.Create(String, Object)
  nameWithType: RepositoryBase<T>.IRepository.Create(String, Object)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Create(System.String, System.Object)
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Create(String, Object)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Create(System.String, System.Object)
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Create(String, Object)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
    name: IRepository.Create
    nameWithType: RepositoryBase<T>.IRepository.Create
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Create(System.String,System.Object)
    name: TcOpen.Inxton.Abstractions.Data.IRepository.Create
    nameWithType: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Create
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
  isExternal: true
  name: IRepository.Read(String)
  nameWithType: RepositoryBase<T>.IRepository.Read(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Read(System.String)
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Read(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Read(System.String)
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Read(String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
    name: IRepository.Read
    nameWithType: RepositoryBase<T>.IRepository.Read
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Read(System.String)
    name: TcOpen.Inxton.Abstractions.Data.IRepository.Read
    nameWithType: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Read
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
  isExternal: true
  name: IRepository.Update(String, Object)
  nameWithType: RepositoryBase<T>.IRepository.Update(String, Object)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Update(System.String, System.Object)
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Update(String, Object)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Update(System.String, System.Object)
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Update(String, Object)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
    name: IRepository.Update
    nameWithType: RepositoryBase<T>.IRepository.Update
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Update(System.String,System.Object)
    name: TcOpen.Inxton.Abstractions.Data.IRepository.Update
    nameWithType: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Update
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
  isExternal: true
  name: IRepository.Delete(String)
  nameWithType: RepositoryBase<T>.IRepository.Delete(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Delete(System.String)
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Delete(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Delete(System.String)
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Delete(String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
    name: IRepository.Delete
    nameWithType: RepositoryBase<T>.IRepository.Delete
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Delete(System.String)
    name: TcOpen.Inxton.Abstractions.Data.IRepository.Delete
    nameWithType: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Delete
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Count
  commentId: P:TcOpen.Inxton.Data.RepositoryBase`1.TcOpen#Inxton#Abstractions#Data#IRepository#Count
  name: IRepository.Count
  nameWithType: RepositoryBase<T>.IRepository.Count
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.TcOpen.Inxton.Abstractions.Data.IRepository.Count
  nameWithType.vb: RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Count
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).TcOpen.Inxton.Abstractions.Data.IRepository.Count
  name.vb: TcOpen.Inxton.Abstractions.Data.IRepository.Count
- uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecords(System.String,System.Int32,System.Int32)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.GetRecords(System.String,System.Int32,System.Int32)
  isExternal: true
  name: GetRecords(String, Int32, Int32)
  nameWithType: RepositoryBase<T>.GetRecords(String, Int32, Int32)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.GetRecords(System.String, System.Int32, System.Int32)
  nameWithType.vb: RepositoryBase(Of T).GetRecords(String, Int32, Int32)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).GetRecords(System.String, System.Int32, System.Int32)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecords(System.String,System.Int32,System.Int32)
    name: GetRecords
    nameWithType: RepositoryBase<T>.GetRecords
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.GetRecords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecords(System.String,System.Int32,System.Int32)
    name: GetRecords
    nameWithType: RepositoryBase(Of T).GetRecords
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).GetRecords
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.IMongoCollection{{T}}
  commentId: T:MongoDB.Driver.IMongoCollection{`0}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.IMongoCollection`1
  name: IMongoCollection<T>
  nameWithType: IMongoCollection<T>
  fullName: MongoDB.Driver.IMongoCollection<T>
  nameWithType.vb: IMongoCollection(Of T)
  fullName.vb: MongoDB.Driver.IMongoCollection(Of T)
  name.vb: IMongoCollection(Of T)
  spec.csharp:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.IMongoCollection`1
  commentId: T:MongoDB.Driver.IMongoCollection`1
  isExternal: true
  name: IMongoCollection<TDocument>
  nameWithType: IMongoCollection<TDocument>
  fullName: MongoDB.Driver.IMongoCollection<TDocument>
  nameWithType.vb: IMongoCollection(Of TDocument)
  fullName.vb: MongoDB.Driver.IMongoCollection(Of TDocument)
  name.vb: IMongoCollection(Of TDocument)
  spec.csharp:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver
  commentId: N:MongoDB.Driver
  isExternal: true
  name: MongoDB.Driver
  nameWithType: MongoDB.Driver
  fullName: MongoDB.Driver
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.#ctor*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.#ctor
  name: MongoDbRepository
  nameWithType: MongoDbRepository<T>.MongoDbRepository
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.MongoDbRepository
  nameWithType.vb: MongoDbRepository(Of T).MongoDbRepository
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).MongoDbRepository
- uid: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings{{T}}
  commentId: T:TcOpen.Inxton.MongoDb.MongoDbRepositorySettings{`0}
  parent: TcOpen.Inxton.MongoDb
  definition: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings`1
  name: MongoDbRepositorySettings<T>
  nameWithType: MongoDbRepositorySettings<T>
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings<T>
  nameWithType.vb: MongoDbRepositorySettings(Of T)
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings(Of T)
  name.vb: MongoDbRepositorySettings(Of T)
  spec.csharp:
  - uid: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings`1
    name: MongoDbRepositorySettings
    nameWithType: MongoDbRepositorySettings
    fullName: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings`1
    name: MongoDbRepositorySettings
    nameWithType: MongoDbRepositorySettings
    fullName: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings`1
  commentId: T:TcOpen.Inxton.MongoDb.MongoDbRepositorySettings`1
  name: MongoDbRepositorySettings<T>
  nameWithType: MongoDbRepositorySettings<T>
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings<T>
  nameWithType.vb: MongoDbRepositorySettings(Of T)
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings(Of T)
  name.vb: MongoDbRepositorySettings(Of T)
  spec.csharp:
  - uid: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings`1
    name: MongoDbRepositorySettings
    nameWithType: MongoDbRepositorySettings
    fullName: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings`1
    name: MongoDbRepositorySettings
    nameWithType: MongoDbRepositorySettings
    fullName: TcOpen.Inxton.MongoDb.MongoDbRepositorySettings
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.RecordExists*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.RecordExists
  name: RecordExists
  nameWithType: MongoDbRepository<T>.RecordExists
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.RecordExists
  nameWithType.vb: MongoDbRepository(Of T).RecordExists
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).RecordExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.CreateNvi(System.String,{T})
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.CreateNvi(System.String,`0)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.CreateNvi(System.String,`0)
  name: CreateNvi(String, T)
  nameWithType: RepositoryBase<T>.CreateNvi(String, T)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.CreateNvi(System.String, T)
  nameWithType.vb: RepositoryBase(Of T).CreateNvi(String, T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).CreateNvi(System.String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.CreateNvi(System.String,`0)
    name: CreateNvi
    nameWithType: RepositoryBase<T>.CreateNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.CreateNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.CreateNvi(System.String,`0)
    name: CreateNvi
    nameWithType: RepositoryBase(Of T).CreateNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).CreateNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.CreateNvi*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.CreateNvi
  name: CreateNvi
  nameWithType: MongoDbRepository<T>.CreateNvi
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.CreateNvi
  nameWithType.vb: MongoDbRepository(Of T).CreateNvi
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).CreateNvi
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: TcOpen.Inxton.Data.RepositoryBase`1.CreateNvi(System.String,`0)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.CreateNvi(System.String,`0)
  isExternal: true
  name: CreateNvi(String, T)
  nameWithType: RepositoryBase<T>.CreateNvi(String, T)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.CreateNvi(System.String, T)
  nameWithType.vb: RepositoryBase(Of T).CreateNvi(String, T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).CreateNvi(System.String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.CreateNvi(System.String,`0)
    name: CreateNvi
    nameWithType: RepositoryBase<T>.CreateNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.CreateNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.CreateNvi(System.String,`0)
    name: CreateNvi
    nameWithType: RepositoryBase(Of T).CreateNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).CreateNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.DeleteNvi(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.DeleteNvi(System.String)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.DeleteNvi(System.String)
  name: DeleteNvi(String)
  nameWithType: RepositoryBase<T>.DeleteNvi(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.DeleteNvi(System.String)
  nameWithType.vb: RepositoryBase(Of T).DeleteNvi(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).DeleteNvi(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.DeleteNvi(System.String)
    name: DeleteNvi
    nameWithType: RepositoryBase<T>.DeleteNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.DeleteNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.DeleteNvi(System.String)
    name: DeleteNvi
    nameWithType: RepositoryBase(Of T).DeleteNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).DeleteNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.DeleteNvi*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.DeleteNvi
  name: DeleteNvi
  nameWithType: MongoDbRepository<T>.DeleteNvi
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.DeleteNvi
  nameWithType.vb: MongoDbRepository(Of T).DeleteNvi
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).DeleteNvi
- uid: TcOpen.Inxton.Data.RepositoryBase`1.DeleteNvi(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.DeleteNvi(System.String)
  isExternal: true
  name: DeleteNvi(String)
  nameWithType: RepositoryBase<T>.DeleteNvi(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.DeleteNvi(System.String)
  nameWithType.vb: RepositoryBase(Of T).DeleteNvi(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).DeleteNvi(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.DeleteNvi(System.String)
    name: DeleteNvi
    nameWithType: RepositoryBase<T>.DeleteNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.DeleteNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.DeleteNvi(System.String)
    name: DeleteNvi
    nameWithType: RepositoryBase(Of T).DeleteNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).DeleteNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.FilteredCountNvi(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.FilteredCountNvi(System.String)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCountNvi(System.String)
  name: FilteredCountNvi(String)
  nameWithType: RepositoryBase<T>.FilteredCountNvi(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.FilteredCountNvi(System.String)
  nameWithType.vb: RepositoryBase(Of T).FilteredCountNvi(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).FilteredCountNvi(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCountNvi(System.String)
    name: FilteredCountNvi
    nameWithType: RepositoryBase<T>.FilteredCountNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.FilteredCountNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCountNvi(System.String)
    name: FilteredCountNvi
    nameWithType: RepositoryBase(Of T).FilteredCountNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).FilteredCountNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.FilteredCountNvi*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.FilteredCountNvi
  name: FilteredCountNvi
  nameWithType: MongoDbRepository<T>.FilteredCountNvi
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.FilteredCountNvi
  nameWithType.vb: MongoDbRepository(Of T).FilteredCountNvi
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).FilteredCountNvi
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCountNvi(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.FilteredCountNvi(System.String)
  isExternal: true
  name: FilteredCountNvi(String)
  nameWithType: RepositoryBase<T>.FilteredCountNvi(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.FilteredCountNvi(System.String)
  nameWithType.vb: RepositoryBase(Of T).FilteredCountNvi(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).FilteredCountNvi(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCountNvi(System.String)
    name: FilteredCountNvi
    nameWithType: RepositoryBase<T>.FilteredCountNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.FilteredCountNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.FilteredCountNvi(System.String)
    name: FilteredCountNvi
    nameWithType: RepositoryBase(Of T).FilteredCountNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).FilteredCountNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.GetRecordsNvi(System.String,System.Int32,System.Int32)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.GetRecordsNvi(System.String,System.Int32,System.Int32)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
  name: GetRecordsNvi(String, Int32, Int32)
  nameWithType: RepositoryBase<T>.GetRecordsNvi(String, Int32, Int32)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.GetRecordsNvi(System.String, System.Int32, System.Int32)
  nameWithType.vb: RepositoryBase(Of T).GetRecordsNvi(String, Int32, Int32)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).GetRecordsNvi(System.String, System.Int32, System.Int32)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
    name: GetRecordsNvi
    nameWithType: RepositoryBase<T>.GetRecordsNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.GetRecordsNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
    name: GetRecordsNvi
    nameWithType: RepositoryBase(Of T).GetRecordsNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).GetRecordsNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.GetRecordsNvi*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.GetRecordsNvi
  name: GetRecordsNvi
  nameWithType: MongoDbRepository<T>.GetRecordsNvi
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.GetRecordsNvi
  nameWithType.vb: MongoDbRepository(Of T).GetRecordsNvi
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).GetRecordsNvi
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
  isExternal: true
  name: GetRecordsNvi(String, Int32, Int32)
  nameWithType: RepositoryBase<T>.GetRecordsNvi(String, Int32, Int32)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.GetRecordsNvi(System.String, System.Int32, System.Int32)
  nameWithType.vb: RepositoryBase(Of T).GetRecordsNvi(String, Int32, Int32)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).GetRecordsNvi(System.String, System.Int32, System.Int32)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
    name: GetRecordsNvi
    nameWithType: RepositoryBase<T>.GetRecordsNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.GetRecordsNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.GetRecordsNvi(System.String,System.Int32,System.Int32)
    name: GetRecordsNvi
    nameWithType: RepositoryBase(Of T).GetRecordsNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).GetRecordsNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.ReadNvi(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.ReadNvi(System.String)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.ReadNvi(System.String)
  name: ReadNvi(String)
  nameWithType: RepositoryBase<T>.ReadNvi(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.ReadNvi(System.String)
  nameWithType.vb: RepositoryBase(Of T).ReadNvi(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).ReadNvi(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.ReadNvi(System.String)
    name: ReadNvi
    nameWithType: RepositoryBase<T>.ReadNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.ReadNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.ReadNvi(System.String)
    name: ReadNvi
    nameWithType: RepositoryBase(Of T).ReadNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).ReadNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.ReadNvi*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.ReadNvi
  name: ReadNvi
  nameWithType: MongoDbRepository<T>.ReadNvi
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.ReadNvi
  nameWithType.vb: MongoDbRepository(Of T).ReadNvi
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).ReadNvi
- uid: TcOpen.Inxton.Data.RepositoryBase`1.ReadNvi(System.String)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.ReadNvi(System.String)
  isExternal: true
  name: ReadNvi(String)
  nameWithType: RepositoryBase<T>.ReadNvi(String)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.ReadNvi(System.String)
  nameWithType.vb: RepositoryBase(Of T).ReadNvi(String)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).ReadNvi(System.String)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.ReadNvi(System.String)
    name: ReadNvi
    nameWithType: RepositoryBase<T>.ReadNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.ReadNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.ReadNvi(System.String)
    name: ReadNvi
    nameWithType: RepositoryBase(Of T).ReadNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).ReadNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.UpdateNvi(System.String,{T})
  commentId: M:TcOpen.Inxton.Data.RepositoryBase{`0}.UpdateNvi(System.String,`0)
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.UpdateNvi(System.String,`0)
  name: UpdateNvi(String, T)
  nameWithType: RepositoryBase<T>.UpdateNvi(String, T)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.UpdateNvi(System.String, T)
  nameWithType.vb: RepositoryBase(Of T).UpdateNvi(String, T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).UpdateNvi(System.String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.UpdateNvi(System.String,`0)
    name: UpdateNvi
    nameWithType: RepositoryBase<T>.UpdateNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.UpdateNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.UpdateNvi(System.String,`0)
    name: UpdateNvi
    nameWithType: RepositoryBase(Of T).UpdateNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).UpdateNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.UpdateNvi*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.UpdateNvi
  name: UpdateNvi
  nameWithType: MongoDbRepository<T>.UpdateNvi
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.UpdateNvi
  nameWithType.vb: MongoDbRepository(Of T).UpdateNvi
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).UpdateNvi
- uid: TcOpen.Inxton.Data.RepositoryBase`1.UpdateNvi(System.String,`0)
  commentId: M:TcOpen.Inxton.Data.RepositoryBase`1.UpdateNvi(System.String,`0)
  isExternal: true
  name: UpdateNvi(String, T)
  nameWithType: RepositoryBase<T>.UpdateNvi(String, T)
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.UpdateNvi(System.String, T)
  nameWithType.vb: RepositoryBase(Of T).UpdateNvi(String, T)
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).UpdateNvi(System.String, T)
  spec.csharp:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.UpdateNvi(System.String,`0)
    name: UpdateNvi
    nameWithType: RepositoryBase<T>.UpdateNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase<T>.UpdateNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TcOpen.Inxton.Data.RepositoryBase`1.UpdateNvi(System.String,`0)
    name: UpdateNvi
    nameWithType: RepositoryBase(Of T).UpdateNvi
    fullName: TcOpen.Inxton.Data.RepositoryBase(Of T).UpdateNvi
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.CountNvi
  commentId: P:TcOpen.Inxton.Data.RepositoryBase{`0}.CountNvi
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.CountNvi
  name: CountNvi
  nameWithType: RepositoryBase<T>.CountNvi
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.CountNvi
  nameWithType.vb: RepositoryBase(Of T).CountNvi
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).CountNvi
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.CountNvi*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.CountNvi
  name: CountNvi
  nameWithType: MongoDbRepository<T>.CountNvi
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.CountNvi
  nameWithType.vb: MongoDbRepository(Of T).CountNvi
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).CountNvi
- uid: TcOpen.Inxton.Data.RepositoryBase`1.CountNvi
  commentId: P:TcOpen.Inxton.Data.RepositoryBase`1.CountNvi
  name: CountNvi
  nameWithType: RepositoryBase<T>.CountNvi
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.CountNvi
  nameWithType.vb: RepositoryBase(Of T).CountNvi
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).CountNvi
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.Collection*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.Collection
  name: Collection
  nameWithType: MongoDbRepository<T>.Collection
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.Collection
  nameWithType.vb: MongoDbRepository(Of T).Collection
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).Collection
- uid: TcOpen.Inxton.Data.RepositoryBase{{T}}.Queryable
  commentId: P:TcOpen.Inxton.Data.RepositoryBase{`0}.Queryable
  parent: TcOpen.Inxton.Data.RepositoryBase{{T}}
  definition: TcOpen.Inxton.Data.RepositoryBase`1.Queryable
  name: Queryable
  nameWithType: RepositoryBase<T>.Queryable
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Queryable
  nameWithType.vb: RepositoryBase(Of T).Queryable
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Queryable
- uid: TcOpen.Inxton.MongoDb.MongoDbRepository`1.Queryable*
  commentId: Overload:TcOpen.Inxton.MongoDb.MongoDbRepository`1.Queryable
  name: Queryable
  nameWithType: MongoDbRepository<T>.Queryable
  fullName: TcOpen.Inxton.MongoDb.MongoDbRepository<T>.Queryable
  nameWithType.vb: MongoDbRepository(Of T).Queryable
  fullName.vb: TcOpen.Inxton.MongoDb.MongoDbRepository(Of T).Queryable
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TcOpen.Inxton.Data.RepositoryBase`1.Queryable
  commentId: P:TcOpen.Inxton.Data.RepositoryBase`1.Queryable
  name: Queryable
  nameWithType: RepositoryBase<T>.Queryable
  fullName: TcOpen.Inxton.Data.RepositoryBase<T>.Queryable
  nameWithType.vb: RepositoryBase(Of T).Queryable
  fullName.vb: TcOpen.Inxton.Data.RepositoryBase(Of T).Queryable
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
