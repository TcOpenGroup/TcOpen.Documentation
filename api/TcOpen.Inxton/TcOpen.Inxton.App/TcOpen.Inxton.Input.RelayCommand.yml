### YamlMime:ManagedReference
items:
- uid: TcOpen.Inxton.Input.RelayCommand
  commentId: T:TcOpen.Inxton.Input.RelayCommand
  id: RelayCommand
  parent: TcOpen.Inxton.Input
  children:
  - TcOpen.Inxton.Input.RelayCommand.#ctor(System.Action{System.Object},System.Func{System.Boolean},System.Action)
  - TcOpen.Inxton.Input.RelayCommand._canExecute
  - TcOpen.Inxton.Input.RelayCommand._execute
  - TcOpen.Inxton.Input.RelayCommand._logAction
  - TcOpen.Inxton.Input.RelayCommand.CanExecute(System.Object)
  - TcOpen.Inxton.Input.RelayCommand.CanExecuteChanged
  - TcOpen.Inxton.Input.RelayCommand.Execute(System.Object)
  - TcOpen.Inxton.Input.RelayCommand.ValidateCanExecute(Vortex.Connector.IValueTag,Vortex.Connector.ValueTypes.ValueChangedEventArgs)
  langs:
  - csharp
  - vb
  name: RelayCommand
  nameWithType: RelayCommand
  fullName: TcOpen.Inxton.Input.RelayCommand
  type: Class
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: RelayCommand
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 12
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  summary: "\nA command whose sole purpose is to relay its functionality to other\nobjects by invoking delegates. \n"
  example: []
  syntax:
    content: 'public class RelayCommand : ICommand'
    content.vb: >-
      Public Class RelayCommand
          Implements ICommand
  inheritance:
  - System.Object
  implements:
  - System.Windows.Input.ICommand
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TcOpen.Inxton.Input.RelayCommand._execute
  commentId: F:TcOpen.Inxton.Input.RelayCommand._execute
  id: _execute
  parent: TcOpen.Inxton.Input.RelayCommand
  langs:
  - csharp
  - vb
  name: _execute
  nameWithType: RelayCommand._execute
  fullName: TcOpen.Inxton.Input.RelayCommand._execute
  type: Field
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: _execute
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 14
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  syntax:
    content: readonly Action<object> _execute
    return:
      type: System.Action{System.Object}
    content.vb: ReadOnly _execute As Action(Of Object)
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: TcOpen.Inxton.Input.RelayCommand._canExecute
  commentId: F:TcOpen.Inxton.Input.RelayCommand._canExecute
  id: _canExecute
  parent: TcOpen.Inxton.Input.RelayCommand
  langs:
  - csharp
  - vb
  name: _canExecute
  nameWithType: RelayCommand._canExecute
  fullName: TcOpen.Inxton.Input.RelayCommand._canExecute
  type: Field
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: _canExecute
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 16
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  syntax:
    content: readonly Func<bool> _canExecute
    return:
      type: System.Func{System.Boolean}
    content.vb: ReadOnly _canExecute As Func(Of Boolean)
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: TcOpen.Inxton.Input.RelayCommand._logAction
  commentId: F:TcOpen.Inxton.Input.RelayCommand._logAction
  id: _logAction
  parent: TcOpen.Inxton.Input.RelayCommand
  langs:
  - csharp
  - vb
  name: _logAction
  nameWithType: RelayCommand._logAction
  fullName: TcOpen.Inxton.Input.RelayCommand._logAction
  type: Field
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: _logAction
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 18
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  syntax:
    content: readonly Action _logAction
    return:
      type: System.Action
    content.vb: ReadOnly _logAction As Action
  modifiers.csharp:
  - readonly
  modifiers.vb:
  - ReadOnly
- uid: TcOpen.Inxton.Input.RelayCommand.#ctor(System.Action{System.Object},System.Func{System.Boolean},System.Action)
  commentId: M:TcOpen.Inxton.Input.RelayCommand.#ctor(System.Action{System.Object},System.Func{System.Boolean},System.Action)
  id: '#ctor(System.Action{System.Object},System.Func{System.Boolean},System.Action)'
  parent: TcOpen.Inxton.Input.RelayCommand
  langs:
  - csharp
  - vb
  name: RelayCommand(Action<Object>, Func<Boolean>, Action)
  nameWithType: RelayCommand.RelayCommand(Action<Object>, Func<Boolean>, Action)
  fullName: TcOpen.Inxton.Input.RelayCommand.RelayCommand(System.Action<System.Object>, System.Func<System.Boolean>, System.Action)
  type: Constructor
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: .ctor
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 20
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  syntax:
    content: public RelayCommand(Action<object> execute, Func<bool> canExecute = null, Action logAction = null)
    parameters:
    - id: execute
      type: System.Action{System.Object}
    - id: canExecute
      type: System.Func{System.Boolean}
    - id: logAction
      type: System.Action
    content.vb: Public Sub New(execute As Action(Of Object), canExecute As Func(Of Boolean) = Nothing, logAction As Action = Nothing)
  overload: TcOpen.Inxton.Input.RelayCommand.#ctor*
  nameWithType.vb: RelayCommand.RelayCommand(Action(Of Object), Func(Of Boolean), Action)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: TcOpen.Inxton.Input.RelayCommand.RelayCommand(System.Action(Of System.Object), System.Func(Of System.Boolean), System.Action)
  name.vb: RelayCommand(Action(Of Object), Func(Of Boolean), Action)
- uid: TcOpen.Inxton.Input.RelayCommand.ValidateCanExecute(Vortex.Connector.IValueTag,Vortex.Connector.ValueTypes.ValueChangedEventArgs)
  commentId: M:TcOpen.Inxton.Input.RelayCommand.ValidateCanExecute(Vortex.Connector.IValueTag,Vortex.Connector.ValueTypes.ValueChangedEventArgs)
  id: ValidateCanExecute(Vortex.Connector.IValueTag,Vortex.Connector.ValueTypes.ValueChangedEventArgs)
  parent: TcOpen.Inxton.Input.RelayCommand
  langs:
  - csharp
  - vb
  name: ValidateCanExecute(IValueTag, ValueChangedEventArgs)
  nameWithType: RelayCommand.ValidateCanExecute(IValueTag, ValueChangedEventArgs)
  fullName: TcOpen.Inxton.Input.RelayCommand.ValidateCanExecute(Vortex.Connector.IValueTag, Vortex.Connector.ValueTypes.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: ValidateCanExecute
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 27
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  syntax:
    content: public void ValidateCanExecute(IValueTag sender, ValueChangedEventArgs args)
    parameters:
    - id: sender
      type: Vortex.Connector.IValueTag
    - id: args
      type: Vortex.Connector.ValueTypes.ValueChangedEventArgs
    content.vb: Public Sub ValidateCanExecute(sender As IValueTag, args As ValueChangedEventArgs)
  overload: TcOpen.Inxton.Input.RelayCommand.ValidateCanExecute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TcOpen.Inxton.Input.RelayCommand.CanExecute(System.Object)
  commentId: M:TcOpen.Inxton.Input.RelayCommand.CanExecute(System.Object)
  id: CanExecute(System.Object)
  parent: TcOpen.Inxton.Input.RelayCommand
  langs:
  - csharp
  - vb
  name: CanExecute(Object)
  nameWithType: RelayCommand.CanExecute(Object)
  fullName: TcOpen.Inxton.Input.RelayCommand.CanExecute(System.Object)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: CanExecute
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 35
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  syntax:
    content: public bool CanExecute(object parameter)
    parameters:
    - id: parameter
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Function CanExecute(parameter As Object) As Boolean
  overload: TcOpen.Inxton.Input.RelayCommand.CanExecute*
  implements:
  - System.Windows.Input.ICommand.CanExecute(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TcOpen.Inxton.Input.RelayCommand.Execute(System.Object)
  commentId: M:TcOpen.Inxton.Input.RelayCommand.Execute(System.Object)
  id: Execute(System.Object)
  parent: TcOpen.Inxton.Input.RelayCommand
  langs:
  - csharp
  - vb
  name: Execute(Object)
  nameWithType: RelayCommand.Execute(Object)
  fullName: TcOpen.Inxton.Input.RelayCommand.Execute(System.Object)
  type: Method
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: Execute
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 40
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  syntax:
    content: public void Execute(object parameter)
    parameters:
    - id: parameter
      type: System.Object
    content.vb: Public Sub Execute(parameter As Object)
  overload: TcOpen.Inxton.Input.RelayCommand.Execute*
  implements:
  - System.Windows.Input.ICommand.Execute(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TcOpen.Inxton.Input.RelayCommand.CanExecuteChanged
  commentId: E:TcOpen.Inxton.Input.RelayCommand.CanExecuteChanged
  id: CanExecuteChanged
  parent: TcOpen.Inxton.Input.RelayCommand
  langs:
  - csharp
  - vb
  name: CanExecuteChanged
  nameWithType: RelayCommand.CanExecuteChanged
  fullName: TcOpen.Inxton.Input.RelayCommand.CanExecuteChanged
  type: Event
  source:
    remote:
      path: src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
      branch: dev
      repo: https://github.com/TcOpenGroup/TcOpen.git
    id: CanExecuteChanged
    path: ../TcOpen/src/TcOpen.Inxton/src/Application/Input/RelayCommand.cs
    startLine: 49
  assemblies:
  - TcOpen.Inxton.App
  namespace: TcOpen.Inxton.Input
  syntax:
    content: public event EventHandler CanExecuteChanged
    return:
      type: System.EventHandler
    content.vb: Public Event CanExecuteChanged As EventHandler
  implements:
  - System.Windows.Input.ICommand.CanExecuteChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TcOpen.Inxton.Input
  commentId: N:TcOpen.Inxton.Input
  name: TcOpen.Inxton.Input
  nameWithType: TcOpen.Inxton.Input
  fullName: TcOpen.Inxton.Input
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ICommand
  commentId: T:System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.Input
  commentId: N:System.Windows.Input
  isExternal: true
  name: System.Windows.Input
  nameWithType: System.Windows.Input
  fullName: System.Windows.Input
- uid: System.Action{System.Object}
  commentId: T:System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullName.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Boolean}
  commentId: T:System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  name: Func<Boolean>
  nameWithType: Func<Boolean>
  fullName: System.Func<System.Boolean>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: System.Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: TcOpen.Inxton.Input.RelayCommand.#ctor*
  commentId: Overload:TcOpen.Inxton.Input.RelayCommand.#ctor
  name: RelayCommand
  nameWithType: RelayCommand.RelayCommand
  fullName: TcOpen.Inxton.Input.RelayCommand.RelayCommand
- uid: TcOpen.Inxton.Input.RelayCommand.ValidateCanExecute*
  commentId: Overload:TcOpen.Inxton.Input.RelayCommand.ValidateCanExecute
  name: ValidateCanExecute
  nameWithType: RelayCommand.ValidateCanExecute
  fullName: TcOpen.Inxton.Input.RelayCommand.ValidateCanExecute
- uid: Vortex.Connector.IValueTag
  commentId: T:Vortex.Connector.IValueTag
  parent: Vortex.Connector
  isExternal: true
  name: IValueTag
  nameWithType: IValueTag
  fullName: Vortex.Connector.IValueTag
- uid: Vortex.Connector.ValueTypes.ValueChangedEventArgs
  commentId: T:Vortex.Connector.ValueTypes.ValueChangedEventArgs
  parent: Vortex.Connector.ValueTypes
  isExternal: true
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs
  fullName: Vortex.Connector.ValueTypes.ValueChangedEventArgs
- uid: Vortex.Connector
  commentId: N:Vortex.Connector
  isExternal: true
  name: Vortex.Connector
  nameWithType: Vortex.Connector
  fullName: Vortex.Connector
- uid: Vortex.Connector.ValueTypes
  commentId: N:Vortex.Connector.ValueTypes
  isExternal: true
  name: Vortex.Connector.ValueTypes
  nameWithType: Vortex.Connector.ValueTypes
  fullName: Vortex.Connector.ValueTypes
- uid: TcOpen.Inxton.Input.RelayCommand.CanExecute*
  commentId: Overload:TcOpen.Inxton.Input.RelayCommand.CanExecute
  name: CanExecute
  nameWithType: RelayCommand.CanExecute
  fullName: TcOpen.Inxton.Input.RelayCommand.CanExecute
- uid: System.Windows.Input.ICommand.CanExecute(System.Object)
  commentId: M:System.Windows.Input.ICommand.CanExecute(System.Object)
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: CanExecute(Object)
  nameWithType: ICommand.CanExecute(Object)
  fullName: System.Windows.Input.ICommand.CanExecute(System.Object)
  spec.csharp:
  - uid: System.Windows.Input.ICommand.CanExecute(System.Object)
    name: CanExecute
    nameWithType: ICommand.CanExecute
    fullName: System.Windows.Input.ICommand.CanExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Input.ICommand.CanExecute(System.Object)
    name: CanExecute
    nameWithType: ICommand.CanExecute
    fullName: System.Windows.Input.ICommand.CanExecute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TcOpen.Inxton.Input.RelayCommand.Execute*
  commentId: Overload:TcOpen.Inxton.Input.RelayCommand.Execute
  name: Execute
  nameWithType: RelayCommand.Execute
  fullName: TcOpen.Inxton.Input.RelayCommand.Execute
- uid: System.Windows.Input.ICommand.Execute(System.Object)
  commentId: M:System.Windows.Input.ICommand.Execute(System.Object)
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: Execute(Object)
  nameWithType: ICommand.Execute(Object)
  fullName: System.Windows.Input.ICommand.Execute(System.Object)
  spec.csharp:
  - uid: System.Windows.Input.ICommand.Execute(System.Object)
    name: Execute
    nameWithType: ICommand.Execute
    fullName: System.Windows.Input.ICommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Input.ICommand.Execute(System.Object)
    name: Execute
    nameWithType: ICommand.Execute
    fullName: System.Windows.Input.ICommand.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Input.ICommand.CanExecuteChanged
  commentId: E:System.Windows.Input.ICommand.CanExecuteChanged
  parent: System.Windows.Input.ICommand
  isExternal: true
  name: CanExecuteChanged
  nameWithType: ICommand.CanExecuteChanged
  fullName: System.Windows.Input.ICommand.CanExecuteChanged
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
